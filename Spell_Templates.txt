Arcane Dart:
[REQ]
resource(source, MP, 2)
resource(source, AP, 5)
inRange(source, target, 8)
[RES]
Combat.modifyResource(source, MP, -2)
Combat.modifyResource(source, AP, -5)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.modifyResource(target, HP, 0-Dice.scale(Combat.calcDamage(source, target, 2, 4, Arcane, HIT), 0.03, Spellpower))

Arcane Warding:
[REQ]
resource(source, MP, 7)
resource(source, AP, 9)
[RES]
Combat.modifyResource(source, MP, -7)
Combat.modifyResource(source, AP, -9)
[ACT]
Combat.addStatus(source, "Arcane Ward", Dice.scale(3, 0.1, Spellpower, 6), Dice.scale(5, 0.01, Spellpower))

Mystic Shield:
[REQ]
resource(source, MP, 15)
resource(source, AP, 12)
!onCooldown(source, "Mystic Shield")
[RES]
Combat.modifyResource(source, MP, -15)
Combat.modifyResource(source, AP, -12)
Combat.applyCooldown(source, "Mystic Shield", 4)
[ACT]
Combat.addStatus(source, "Mystic Shield", 5, Dice.scale(10, 0.06, Spellpower))

Flicker of Life:
[REQ]
resource(source, MP, 15)
resource(source, AP, 9)
inRange(source, target, 6)
[RES]
Combat.modifyResource(source, MP, -15)
Combat.modifyResource(source, AP, -9)
[ACT]
Combat.modifyResource(target, HP, Dice.scale(Dice.roll(10, 20), 0.02, Spellpower))

Stone Guard:
[REQ]
resource(source, MP, 15)
resource(source, AP, 9)
inRange(source, target, 4)
[ACT]
Combat.modifyResource(source, MP, -15)
Combat.modifyResource(source, AP, -9)
Combat.addStatus(target, "Stone Guard", Dice.scale(4, 0.05, Spellpower, 6), Dice.scale(10, 0.008, Spellpower))

Singe:
[REQ]
resource(source, MP, 6)
resource(source, AP, 7)
inRange(source, target, 7)
[RES]
Combat.modifyResource(source, MP, -6)
Combat.modifyResource(source, AP, -7)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.modifyResource(target, HP, 0-Dice.scale(Combat.calcDamage(source, target, 2, 9, Fire, HIT, partial = 0.5, critical = 1.2), 0.05, Spellpower))

Chill:
[REQ]
resource(source, MP, 10)
resource(source, AP, 6)
inRange(source, target, 6)
[RES]
Combat.modifyResource(source, MP, -10)
Combat.modifyResource(source, AP, -6)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.modifyResource(target, HP, 0-Dice.scale(Combat.calcDamage(source, target, 1, 12, Cold, HIT), 0.01, Spellpower))
Combat.addStatus(target, "Chill", 2, Dice.scale(5, 0.012, Spellpower), chance=Dice.rollPresetChance(source, target, "Frequent"))

Shock:
[REQ]
resource(source, MP, 13)
resource(source, AP, 7)
inRange(source, target, 2)
!onCooldown(source, "Shock")
[RES]
Combat.modifyResource(source, MP, -13)
Combat.modifyResource(source, AP, -6)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.modifyResource(target, HP, 0 - Dice.scale(Combat.calcDamage(source, target, min=15, max=22, element=Electric, hitType=hit), 0.014, Spellpower))
Combat.applyCooldown(source, "Shock", 1)

Suggest Laziness:
[REQ]
resource(source, MP, 5)
resource(source, AP, 5)
inRange(source, target, 12)
[RES]
Combat.modifyResource(source, MP -5)
Combat.modifyResource(source, AP, -5)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.addStatus(target, "Suggest Laziness", 1, chance=Dice.rollPresetChance(source, target, "Occasional"))

Stutter:
[REQ]
resource(source, MP, 14)
resource(source, AP, 9)
inRange(source, target, 6)
[RES]
Combat.modifyResource(source, MP, -14)
Combat.modifyResource(source, AP, -9)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.addStatus(target, "Stutter_spell_fail", 5, 10)
Combat.addStatus(target, "Stutter_spellpower_reduction", 5, Dice.scale(5, 0.02, Spellpower))

Cloud Vision:
[REQ]
resource(source, MP, 9)
resource(source, AP, 9)
inRange(source, target, 6)
[RES]
Combat.modifyResource(source, MP, -9)
Combat.modifyResource(source, AP, -9)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.addStatus(target, "Cloud Vision", Dice.scale(5, 0.02, Spellpower), Dice.scale(5, 0.012, Spellpower))
Combat.addStatus(target, "Cloud Vision", Dice.scale(5, 0.02, Spellpower), Dice.scale(2.5, 0.012, Spellpower), partial = true)

Haunt:
[REQ]
resource(source, MP, 20)
resource(source, AP, 11)
inRange(source, target, 5)
!onCooldown(source, "Haunt")
[RES]
Combat.modifyResource(source, MP -20)
Combat.modifyResource(source, AP, -11)
Combat.applyCooldown(source, "Haunt", 3)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.modifyResource(target, HP, 0 - Dice.scale(Combat.calcDamage(source, target, min=13, max=20, element=Shadow, hitType=hit), 0.01, Spellpower))
Combat.addStatus(target, "Haunt", Dice.scale(3, 0.02, Spellpower, cap = 4), min=Dice.scale(2, 0.005, Spellpower), max=Dice.scale(8, 0.005, Spellpower))

Zone of Silence:
[REQ]
resource(source, MP, 20)
resource(source, AP, 6)
inRange(source, target, 3)
[RES]
Combat.modifyResource(source, MP, -20)
Combat.modifyResource(source, AP, -6)
[ACT]
Terrain.removeTerrainStatus(terrainStatus="Zone of Silence", location=target.location)
Terrain.addTerrainStatus(terrainStatus="Zone of Silence", location=target.location, duration=Dice.scale(3, 0.011, Spellpower, cap=6)) 

Blurry:
[REQ]
resource(source, MP, 6)
resource(source, AP, 3)
[RES]
Combat.modifyResource(source, MP, -6)
Combat.modifyResource(source, AP, -3)
[ACT]
Combat.addStatus(source, "Blurry", 1, Dice.scale(5, 0.02, Spellpower))

Weapon Enhance:
[REQ]
resource(source, MP, 9)
resource(source, AP, 5)
inRange(source, target, 3)
[RES]
Combat.modifyResource(source, MP, -9)
Combat.modifyResource(source, AP, -5)
[ACT]
Combat.addStatus(target, "Weapon_enhance_accuracy", Dice.scale(3, 0.03, Spellpower, cap=7), Dice.scale(3, 0.07, Spellpower))
Combat.addStatus(target, "Weapon_enhance_critical_damage", Dice.scale(3, 0.03, Spellpower, cap=7), Dice.scale(5, 0.05, Spellpower))
Combat.addStatus(target, "Weapon_enhance_armor_penetration", Dice.scale(3, 0.03, Spellpower, cap=7), Dice.scale(3, 0.07, Spellpower))
Combat.addStatus(target, "Weapon_enhance_critical_chance", Dice.scale(3, 0.03, Spellpower, cap=7), Dice.scale(1, 0.035, Spellpower))

Flaming Weapon:
[REQ]
resource(source, MP, 12)
resource(source, AP, 8)
inRange(source, target, 3)
[RES]
Combat.modifyResource(source, MP, -12)
Combat.modifyResource(source, AP, -8)
[ACT]
Combat.addStatus(target, "Flaming Weapon", Dice.scale(3, 0.03, cap=7), min=Dice.scale(1, 0.01, Spellpower), max=Dice.scale(8, 0.01, Spellpower))

Burst:
[REQ]
resource(source, MP, 12)
resource(source, AP, 9)
inRange(source, target, 8)
!onCooldown(source, "Burst")
[RES]
Combat.modifyResource(source, MP -12)
Combat.modifyResource(source, AP, -9)
Combat.applyCooldown(source, "Burst", 1)
[HIT]
Combat.calcHit(source, Terrain.getAOETargets(target, radius=1, selectMonsters=True, includeCenter=False), "Magical")
[ACT]
Combat.modifyResource(target, HP, 0 - Dice.scale(Combat.calcDamage(source, target, min=5, max=6, element=Arcane, hitType=hitSet), 0.005, Spellpower))
Combat.knockback(Terrain.getAOETargets(target, radius=1, selectMonsters=True, includeCenter=False), target.location, distance=1)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.modifyResource(target, HP, 0-Dice.scale(Combat.calcDamage(source, targetSet, min=10, max=12, element=Arcane, hitType=hit), 0.005, Spellpower))

Identification:
# Needs out of combat use...
[REQ]
resource(source, MP, 5)
resource(source, AP, 5)
[RES]
Combat.modifyResource(source, MP, -5)
Combat.modifyResource(source, AP, -5)
[ACT]
Combat.addStatus(source, "Identification", 5, 5)

Hovering Shield:
[REQ]
resource(source, MP, 8)
resource(source, AP 5)
[RES]
Combat.modifyResource(source, MP -8)
Combat.modifyResource(source, AP, -5)
[ACT]
Combat.addStatus(source, "Hovering Shield", 5, Dice.scale(12, 0.008, Spellpower))

Fright:
[REQ]
resource(source, MP, 6)
resource(source, AP, 3)
!onCooldown(source, "Fright")
inRange(source, target, 6)
[RES]
Combat.modifyResource(source, MP, -6)
Combat.modifyResource(source, AP, -3)
Combat.applyCooldown(source, "Fright", 1)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.addStatus(target, "Fright_shadow_adjustment", 4, 20)
Combat.addStatus(target, "Fright_attack_power_adjustment", 4, 5)

Infection:
[REQ]
resource(source, MP, 7)
resource(source, AP, 6)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, MP, -7)
Combat.modifyResource(source, AP, -6)
[HIT]
Combat.calcHit(source, target, "Magical")
Combat.calcHit(source, target, "Poison", rating=Dice.scale(35, 0.012, Spellpower))
[ACT]
Combat.addStatus(target, "Infection_damage", Dice.scale(4, 0.013, Spellpower), min=Dice.scale(7, 0.03, Spellpower), max=Dice.scale(10, 0.03, Spellpower))
Combat.addStatus(target, "Infection_tolerance_adjustment", Dice.scale(4, 0.013, Spellpower), 5)

Hands of Healing:
[REQ]
resource(source, MP, 22)
resource(source, AP, 8)
!onCooldown(source, "Hands of Healing")
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, MP, -22)
Combat.modifyResource(source, AP, -8)
Combat.applyCooldown(source, "Hands of Healing", 1)
[ACT]
Combat.modifyResource(target, HP, Dice.scale(Dice.roll(20, 40), 0.02, Spellpower))

Elemental Boon:
[REQ]
resource(source, MP, 8)
resource(source, AP, 10)
inRange(source, target, 6)
[RES]
Combat.modifyResource(source, MP, -8)
Combat.modifyResource(source, AP, -10)
[ACT]
Combat.addStatus(target, "Elemental Boon", Dice.scale(6, 0.003, Spellpower, cap=7), Dice.scale(15, 0.007, Spellpower))

Torrent:
[REQ]
resource(source, MP, 25)
resource(source, AP, 14)
inRange(source, target, 14)
!onCooldown(source, "Torrent")
[RES]
Combat.modifyResource(source, MP, -25)
Combat.modifyResource(source, AP, -14)
Combat.applyCooldown(source, "Torrent", 2)
[HIT]
Terrain.getLineTargets(source.location, target.location, selectMonsters=True, selectFirstOnly=True)
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.modifyResource(target, HP, 0 - Dice.scale(Combat.calcDamage(source, target, min=10, max=35, element=Cold, hitType=hit), 0.014, Spellpower))
knockback(target, source.location, distance=5, didHit=(isHit(hit, "Normal Hit") and sizeCompare(target, "Huge", smallerThan=True)))

Lightning Bolt:
[REQ]
resource(source, MP, 32)
resource(source, AP, 8)
inRange(source, target, 6)
!onCooldown(source, "Lightning Bolt")
[RES]
Combat.modifyResource(source, MP, -32)
Combat.modifyResource(source, AP, -8)
Combat.applyCooldown(source, "Lightning Bolt", 1)
[HIT]
Terrain.getLineTargets(source.location, target.location, selectMonsters=True, selectFirstOnly=False)
Combat.calcHit(source, targetSet, "Magical")
[ACT]
Combat.modifyResource(targetSet, HP, 0 - Dice.scale(Combat.calcDamage(source, target, min=5, max=33, element=Electric, hitType=hitSet, partial=0.5, critical=1.3), 0.005, Spellpower))

Suggest Cowardice:
[REQ]
resource(source, MP, 9)
resource(source, AP, 10)
inRange(source, target, 5)
sizeCompare(target, LARGE, smallerThan=True)
[RES]
Combat.modifyResource(source, MP -9)
Combat.modifyResource(source, AP, -10)
[HIT]
Combat.calcHit(source, target, "Magical")
[ACT]
Combat.addStatus(target, "Suggest Cowardice", 1, 0,  chance=Dice.rollPresetChance(source, target, "Reliable"), partial=True)

Pit:
[REQ]
resource(source, MP, 8)
resource(source, AP, 5)
inRange(source, target, 5)
!onCooldown(source, "Pit")
[RES]
Combat.modifyResource(source, MP, -8)
Combat.modifyResource(source, AP, -5)
Combat.applyCooldown(source, "Pit", 1)
[ACT]
Terrain.removeTerrainStatus(terrainStatus="Pit", location=target, boolean dispelConnectedTiles=False)
Terrain.addTerrainStatus(terrainStatus="Pit", duration=4, location=target)

Smoke Screen:
[REQ]
resource(source, MP, 18)
resource(source, AP, 6)
inRange(source, target, 4)
!onCooldown(source, "Smoke Screen")
[RES]
Combat.modifyResource(source, MP, -18)
Combat.modifyResrouce(source, AP, -6)
Combat.applyCooldown(source, "Smoke Screen", 2)
[ACT]
Terrain.removeTerrainStatus(terrainStatus="Smoke Screen", location=target, boolean dispelConnectedTiles=False)
Terrain.addTerrainStatus(terrainStatus="Smoke Screen", duration=Dice.scale(2, 0.03, Spellpower, cap=6), location=target)

Shrink:
[REQ]
resource(source, MP, 10)
resource(source, AP, 4)
inRange(source, target, 4)
!onCooldown(source, "Shrink")
sizeCompare(target, SMALL, smallerThan=False)
[RES]
Combat.modifyResource(source, MP -10)
Combat.modifyResource(source, AP, -4)
Combat.applyCooldown(source, "Shrink", 2)
[ACT]
Combat.addStatus(target, "Shrink", Dice.scale(2, 0.025, Spellpower, cap=5), 10, partial=True)

Frost Weapon:
[REQ]
resource(source, MP, 12)
resource(source, AP, 8)
inRange(source, target, 3)
[RES]
Combat.modifyResource(source, MP, -12)
Combat.modifyResource(source, AP, -8)
[ACT]
Combat.addStatus(target, "Frost Weapon", Dice.scale(3, 0.03, Spellpower, cap=7), Dice.scale(Dice.roll(min=2, max=5), 0.019, Spellpower))

// Fighter Skills

Mighty Blow:
[REQ]
resource(source, AP, 9)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -9)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=-5)
[ACT]
Combat.weaponAttack(source, target, hit, forceMod=1.5)

Brace:
[REQ]
resource(source, AP, 2)
[RES]
Combat.modifyResource(source, AP, -2)
[ACT]
Combat.addStatus(source, "Brace", 1, 5)
Combat.endTurn(source)

Dash:
[REQ]
resource(source, AP, 2)
!onCooldown(source, "Dash")
[RES]
Combat.modifyResource(source, AP, -2)
Combat.applyCooldown(source, "Dash", 4)
[ACT]
Combat.setMovementCost(source, 2)

Quick Strike:
[REQ]
resource(source, AP, 3)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -3)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=-10)
[ACT]
Combat.weaponAttack(source, target, hit, forceMod=0.5)

Precise Blow:
[REQ]
resource(source, AP, 7)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -7)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=4)
[ACT]
Combat.weaponAttack(source, target, hit)

Thrust:
[REQ]
resource(source, AP, 5)
inRange(source, target, 1)
!onCooldown(source, "Thrust")
usingWeapon(source, "Sword")
[RES]
Combat.modifyResource(source, AP -5)
Combat.applyCooldown(source, "Thrust", 1)
[HIT]
Combat.calcHit(source, target, "Physical")
[ACT]
Combat.weaponAttack(source, target, hit, elementOverride="Piercing")

Clobber:
[REQ]
resource(source, AP, 10)
inRange(source, target, 1)
usingWeapon(source, "Club")
[RES]
Combat.modifyResource(source, AP, -10)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=-3)
[ACT]
Combat.weaponAttack(source, target, hit, armorPenetrationMod=5)
Combat.addStatus(target, "Stun", duration=1, chance = (0.2 * sizeCompare(target, LARGE, smallerThan=True)), hit=hit)

Wound Leg:
[REQ]
resource(source, AP, 9)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -9)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=-10)
[ACT]
Combat.addStatus(target, "Wound Leg", duration=3, hit=hit)

Wound Arm:
[REQ]
resource(source, AP, 9)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -9)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=-10)
[ACT]
Combat.addStatus(target, "Wound Arm", duration=3, hit=hit)

Combo Attack:
[REQ]
resource(source, AP, 6)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -6)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=(getNumberOfStackedStatus(source, "Combo Attack") - 2), critMod=getNumberOfStackedStatus(source, "Combo Attack"))
[ACT]
Combat.weaponAttack(source, target, hit, overallDamageMod=1.1, criticalDamageMod=( 1 + (3 * getNumberOfStackedStatus(source, "Combo Attack")/100) ))
Combat.addStatus(source, "Combo Attack", duration=1, overwrite=False)  

Rush:
[REQ]
resource(source, AP, 7, modifier=usingArmor(source, "Heavy"))
canReach(source, target, source.movementTiles)
!onCooldown(source, "Rush")
[RES]
Combat.modifyResource(source, AP, -7, modifier= 0-usingArmor(source, "Heavy"))
Combat.applyCooldown(source, "Rush", 3)
[ACT]
Combat.movePlayer(source, target)
[HIT]
Combat.calcHit(source, getMeleeFacingEnemy(source), "Physical")
[ACT]
Combat.weaponAttack(source, getMeleeFacingEnemy(source), hit, overallDamageMod=1.2)
Combat.modifyResource(enemy, HP, 0 - Combat.calcDamage(source, target, min=(source.totalDR * 0.4 * usingArmor("Heavy")),
                      max=(source.totalDR * 0.4 * usingArmor("Heavy")), element=Bludgeoning, hitType=hit))
					  
Expert Notch:
[REQ]
resource(source, AP, 7)
inRange(source, target, source.weaponRange)
usingWeapon(source, "Bow")
[RES]
Combat.modifyResource(source, AP -7)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=6)
[ACT]
Combat.weaponAttack(source, target, hit)

Trap Shrapnel:
[REQ]
resource(source, AP, 5)
!onCooldown(source, "Trap Shrapnel")
[RES]
Combat.modifyResource(source, AP, -5)
Combat.applyCooldown(source, "Trap Shrapnel", 1)
[ACT]
Terrain.removeTrap(source.location)
Terrain.addTerrainStatus("Trap Shrapnel", duration=0, source.location, minDamage=Dice.scale(5, 0.014, Cunning), maxDamage=Dice.scale(12, 0.014, Cunning), trapRating=Dice.scale(13, 0.015, Cunning)) 

Tunnel Vision:
[REQ]
resource(source, AP, 10)
!onCooldown(source, "Tunnel Vision")
[RES]
Combat.modifyResource(source, AP -10)
Combat.applyCooldown(source, "Tunnel Vision", 5)
[ACT]
Combat.addStatus(source, "Tunnel Vision", duration=4)

Trap Sticky:
[REQ]
resource(source, AP, 3)
!onCooldown(source, "Trap Sticky")
[RES]
Combat.modifyResource(source, AP, -3)
Combat.applyCooldown(source, "Trap Sticky", 1)
[ACT]
Terrain.removeTrap(source.location)
Terrain.addTerrainStatus("Trap Sticky", duration=0, location=source.location, trapRating=Dice.scale(20, 0.007, Cunning))

Balm:
[REQ]
resource(source, AP, 6)
!onCooldown(source, "Balm")
[RES]
Combat.modifyResource(source, AP, -6)
Combat.applyCooldown(source, "Balm", 2)
[ACT]
Combat.modifyResource(source, HP, (source.maxHP * 0.05)) 

Rapid Reload:
[REQ]
resource(source, AP, 3)
inRange(source, target, source.weaponRange)
weaponEquipped(source, "Crossbow")
[RES]
Combat.modifyResource(source, AP, -3)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=-8)
[ACT]
Combat.weaponAttack(source, target, hit)

Ranger's Aim:
[REQ]
resource(source, AP, 2)
!onCooldown(source, "Ranger's Aim")
[RES]
Combat.modifyResource(source, AP, -2)
Combat.applyCooldown(source, "Ranger's Aim", 1)
[ACT]
Combat.addStatus(source, "Ranger's Aim", duration=1)

Trap Boulder-Pit:
[REQ]
resource(source, AP, 5)
!onCooldown(source, "Trap Boulder-Pit")
[RES]
Combat.modifyResource(source, AP, -5)
Combat.applyCooldown(source, "Trap Boulder-Pit", 1)
[ACT]
Terrain.removeTrap(source.location)
Terrain.addTerrainStatus("Trap Boulder-Pit", duration=0, location=source.location, minDamage=Dice.scale(3, 0.02, Cunning), maxDamage=Dice.scale(8, 0.02, Cunning), element="Bludgeoning", trapRating=Dice.scale(25, 0.006, Cunning))

Defensive Slash:
[REQ]
resource(source, AP, 10)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -10)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=-3)
[ACT]
Combat.weaponAttack(source, target, hit, overallDamageMod=0.75)
Combat.addStatus(source, "Defensive Slash", duration=2, hit=hit)

Double-Shot:
[REQ]
resource(source, AP, 7)
inRange(source, target, source.weaponRange)
!onCooldown(source, "Double-Shot")
[RES]
Combat.modifyResource(source, AP, -7)
Combat.applyCooldown(source, "Double-Shot", 1)
[HIT]
Combat.calcHit(source, target, "Physical", critMod=(0-source.totalCritChance)
[ACT]
Combat.weaponAttack(source, target, hit, overallDamageMod=1.05)
[HIT]
Combat.calcHit(source, target, "Physical", critMod=(0-source.totalCritChance)
[ACT]
Combat.weaponAttack(source, target, hit, overallDamageMod=1.05)

Trap Tar:
[REQ]
resource(source, AP, 5)
!onCooldown(source, "Trap Tar")
[RES]
Combat.modifyResource(source, AP, -5)
Combat.applyCooldown(source, "Trap Tar", 1)
[ACT]
Terrain.removeTrap(source.location)
Terrain.addTerrainStatus("Trap Tar", duration=0, location=source.location, trapRating=Dice.scale(30, 0.005, Cunning))

// Wizard Skills

Magic Guard:
[REQ]
resource(source, AP, 3)
[RES]
Combat.modifyResource(source, AP, -3)
[ACT]
Combat.addStatus(source, "Magic Guard", duration=1)
Combat.endTurn(source)

Gather:
[REQ]
resource(source, AP, 7)
[RES]
Combat.modifyResource(source, AP, -7)
[ACT]
Combat.addStatus(source, "Gather", duration=1)

#Apply Salve:
#[REQ]
#resource(source, AP, 7)
#!onCooldown(source, "Apply Salve")
#inRange(source, target, 1)
# // Has Potion??? TODO
#[RES]
#Combat.modifyResource(source, AP, -7)
#Combat.applyCooldown(source, "Apply Salve", 1)
#[ACT]
# todo!
#

Spell Sight:
[REQ]
resource(source, AP, 3)
!onCooldown(source, "Spell Sight")
[RES]
Combat.modifyResource(source, AP, -3)
Combat.applyCooldown(source, "Spell Sight", 2)
[ACT]
Combat.addStatus(source, "Spell Sight", duration=0)

Runic Dust:
[REQ]
resource(source, AP, 5)
inRange(source, target, 1)
!onCooldown(source, "Runic Dust")
[RES]
Combat.modifyResource(source, AP, -5)
Combat.applyCooldown(source, "Runic Dust", 1)
[ACT]
Combat.addStatus(target, "Runic Dust", duration=3, magnitude=(2 + source.level))

Befuddle:
[REQ]
resource(source, AP, 12)
inRange(source, target, 3)
!onCooldown(source, "Befuddle")
[RES]
Combat.modifyResource(source, AP, -12)
Combat.applyCooldown(source, "Befuddle", 4)
[ACT]
Combat.modifyThreat(source, target, 0.7)
Combat.addStatus(target, "Stun", duration=1,  chance=Dice.rollPresetChance(source, target, "Rare"))

// Thief Skills

Stealth:
[REQ]
resource(source, AP, 7)
!onCooldown(source, "Stealth")
!isStealthed(source)
[RES]
Combat.modifyResource(source, AP, -7)
Combat.applyCooldown(source, "Stealth", 3)
[ACT]
Combat.addStatus(source, "Stealth", duration=0)

Backstab:
[REQ]
resource(source, AP, 10)
!onCooldown(source, "Backstab")
isStealthed(source)
inRange(source, target, source.weaponRange)
inBackstabPosition(source, target, rangedBackstab=isClass(source, "Assassin"))
usingWeapon(source, "Sword") || usingWeapon(source, "Knife") || (isClass(source, "Assassin") && usingWeapon(source, "Bow"))
[RES]
Combat.modifyResource(source, AP, -10)
Combat.applyCooldown(source, "Backstab", 2)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=((5 + (4 * usingWeapon("Sword"))) * !usingWeaponStyle(source, "Dual")), critMod=(50 - (usingWeapon("Sword") * 25)))
[ACT]
Combat.weaponAttack(source, target, hit, criticalDamageMod=(2 - (0.5 * sword)))

Swipe Potion:
[REQ]
resource(source, AP, 3)
inRange(source, target, 1)
!onCooldown(source, "Swipe Potion")
hasPotion(target)
[RES]
Combat.modifyResource(source, AP, -3)
Combat.applyCooldown(source, "Swipe Potion", 2)
[HIT]
Dice.rollSuccess( source.totalCunning - target.totalCunning )
[ACT]
Combat.stealPotion(source, target)

# Trap disarming mechanics have not been fleshed out.  This needs to be done before this can be encoded. TODO
#Disarm Trap:
#[REQ]
#resource(source, AP, 17)
#inRange(source, target, 1)
#[RES]
#Combat.modifyResource(source, AP, -17)
#[HIT]
#Dice.rollSuccess(

Hit and Run:
[REQ]
resource(source, AP, 5)
inRange(source, target, 1)
!onCooldown(source, "Hit and Run")
[RES]
Combat.modifyResource(source, AP, -5)
Combat.applyCooldown(source, "Hit and Run", 2)
[HIT]
Combat.calcHit(source, target, "Physical")
[ACT]
Combat.weaponAttack(source, target, hit, noCounter=True)
knockback(source, target.location, 2, ignoreResistance=True)

Agile Position:
[REQ]
resource(source, AP, 5)
!onCooldown(source, "Agile Position")
[RES]
Combat.modifyResource(source, AP, -5)
Combat.applyCooldown(source, "Agile Position", 5)
[ACT]
Combat.addStatus(source, "Agile Position", duration=1)
Combat.endTurn(source)

Feint:
[REQ]
resource(source, AP, 5)
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -5)
[HIT]
Dice.rollSuccess(max((source.totalCunning - target.totalCunning) * 8, 72))
[ACT]
Combat.addStatus(target, "Feint", duration=2, hit=hit) 

Far-Sighted Focus:
[REQ]
resource(source, AP, 8)
!onCooldown(source, "Far-Sighted Focus")
[RES]
Combat.modifyResource(source, AP, -8)
Combat.applyCooldown(source, "Far-Sighted Focus", 1)
[ACT]
Combat.addStatus(source, "Far-Sighted Focus", duration=3, relativeTarget=target)

All or Nothing:
[REQ]
resource(source, AP, 6)
!onCooldown(source, "All or Nothing")
inRange(source, target, source.weaponRange)
[RES]
Combat.modifyResource(source, AP, -6)
Combat.applyCooldown(source, "All or Nothing", 2)
[HIT]
Combat.calcHit(source, target, "Physical", modifier=-22, critMod=80)
[ACT]
Combat.weaponAttack(source, target, hit, overallDamageMod=1.3)

Redirect:
[REQ]
resource(source, AP, 10)
!onCooldown(source, "Redirect")
inRange(source, target, 5)
[RES]
Combat.modifyResource(source, AP, -10)
Combat.applyCooldown(source, "Redirect", 3)
[ACT]
Combat.modifyThreat(source, target, 0.35)

Dirty Shot:
[REQ]
resource(source, AP, 5)
!onCooldown(source, "Dirty Shot")
inRange(source, target, source.weaponRange)
[RES]
Combat.modifyResource(source, AP, -5)
Combat.applyCooldown(source, "Dirty Shot", 3)
[HIT]
Combat.calcHit(source, target, "Physical")
[ACT]
Combat.weaponAttack(source, target, hit, mightMod=(source.totalCunning / 2))
Combat.addStatus(target, "Stun", 1, chance=Dice.rollPresetChance(source, target, "Occasional"))

Shock Factor:
[REQ]
resource(source, AP, 11)
!onCooldown(source, "Shock Factor")
inRange(source, target, 6)
[RES]
Combat.modifyResource(source, AP, -11)
Combat.applyCooldown(source, "Shock Factor", 4)
[ACT]
Combat.addStatus(target, "Stun", 1,  chance=Dice.rollPresetChance(source, target, "Frequent"))
Combat.addStatus(target, "Shock_Factor_attack_mod", 3,  chance=Dice.rollPresetChance(source, target, "Reliable"))
Combat.addStatus(target, "Shock_Factor_spell_failure", 3,  chance=Dice.rollPresetChance(source, target, "Reliable"))

# WeaponMaster Combination Abilities (Active)

Shield Deflection:
[REQ]
resource(source, AP, 4)
!onCooldown(source, "Shield Deflection")
usingShield(source, "Heavy")
[RES]
Combat.modifyResource(source, AP, -4)
Combat.applyCooldown(source, "Shield Deflection", 5)
[ACT]
Combat.addStatus(source, "Shield Deflection", duration=2)

Shield Bash:
[REQ]
resource(source, AP, 8)
!onCooldown(source, "Shield Bash")
usingShield(source, "Any")
[RES]
Combat.modifyResource(source, AP, -8)
Combat.applyCooldown(source, "Shield Bash", 3)
[HIT]
Combat.calcHit(source, target, "Physical")
[ACT]
Combat.weaponAttack(source, target, hit, elementOverride="bludgeoning", overallDamageMod=0.3)
Combat.addStatus(target, "Stun", duration=1, chance=chanceFromSize(target, [["Large", 0.3], ["Huge", 0]], defaultChance=0.8)) 

True Friend:
[REQ]
resource(source, AP, 10)
[RES]
Combat.modifyResource(source, AP, -10)
[ACT]
Combat.addStatus(source, "True_Friend_DR_bonus", duration=1)
Combat.addStatus(Terrain.getAOETargets(source.location, radius=1, selectMonsters=False, includeCenter=False), "True_Friend_Redirect", duration=1, relativeTarget=source)
Combat.endTurn(source)

Cleave:
[REQ]
resource(source, AP, 8)
[RES]
Combat.modifyResource(source, AP, -8)
[HIT]
Combat.calcHit(source, Terrain.getConeTargets(source, distance=1, degrees=180, selectMonsters=True), "Physical", modifier=-5)
[ACT]
Combat.weaponAttack(source, targetSet.remove(getMeleeFacingEnemy(source)), hit, overallDamageMod=0.3, ignoreOnHitEffects=True)
Combat.weaponAttack(source, getMeleeFacingEnemy(source), hit, overallDamageMod=(0.8 + 0.2 * usingWeapon(source, "Axe"))

# Dragoon Combination Abilities

Jump Attack:
[REQ]
resource(source, AP, 15)
usingWeaponStyle(source, "Two-Handed")
inRange(source, target, 6)
!onCooldown(source, "Jump Attack")
hasAdjacentFreeSpace(target)
[RES]
Combat.modifyResource(source, AP, -15)
Combat.applyCooldown(source, "Jump Attack", 2)
[HIT]
Combat.calcHit(source, target, "Physical")
[ACT]
Combat.movePlayer(source, Terrain.getRandomAdjacentFreeSpace(target), instant=True)
Combat.weaponAttack(source, target, hit, overallDamageMod=2)
Combat.weaponAttack(source, Terrain.getAOETargets(source.location, radius=1, selectMonsters=True), 
                    "Normal Hit", overallDamageMod=0.15, elementOverride="Bludgeoning", ignoreOnHitEffects=True)

Diagonal Thrusts:
[REQ]
resource(source, AP, 11)
usingWeapon(source, "Polearm")
[RES]
Combat.modifyResource(source, AP, -11)
[HIT]
calcHit(source, Terrain.getForwardDiagonalTargets(source.location, selectMonsters=True), "Physical")
[ACT]
Combat.weaponAttack(source, targetSet, hitSet, forceMod=1.2, criticalDamageMod=1.05)

Long Reach:
[REQ]
resource(source, AP, 7)
usingWeapon(source, "Polearm")
inRange(source, target, 2)
[RES]
Combat.modifyResource(source, AP, -7)
[HIT]
calcHit(source, target, "Physical")
[ACT]
Combat.weaponAttack(source, target, hit, noCounter=True)

Spear-Pierce:
[REQ]
resource(source, AP, 10)
usingWeapon(source, "Polearm")
inRange(source, target, 1)
[RES]
Combat.modifyResource(source, AP, -10)
[HIT]
calcHit(source, target, "Physical", modifier=-2)
[ACT]
Combat.weaponAttack(source, target, hit)
Combat.addStatus(target, "Spear-Pierce", duration=3, hit=hit, chance=Dice.rollPresetChance(source, target, "Reliable"))



